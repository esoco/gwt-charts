<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="111" tokens="173">
<file line="39" path="/home/rgafonso/workspace/gwt-charts-0.9.10/src/main/java/com/googlecode/gwt/charts/client/calendar/Calendar.java"/>
<file line="39" path="/home/rgafonso/workspace/gwt-charts-0.9.10/src/main/java/com/googlecode/gwt/charts/client/sankey/Sankey.java"/>
<codefragment>
<![CDATA[
	public Sankey() {
		super();
	}

	/**
	 * Adds an handler that listens for error events.
	 * 
	 * @param handler the class to call when the event is fired
	 * @return the handler reference
	 */
	public HandlerRef addErrorHandler(ErrorHandler handler) {
		return addHandler(handler);
	}

	/**
	 * Adds an handler that listens for mouse out events.
	 * 
	 * @param handler the class to call when the event is fired
	 * @return the handler reference
	 */
	public HandlerRef addOnMouseOutHandler(OnMouseOutHandler handler) {
		return addHandler(handler);
	}

	/**
	 * Adds an handler that listens for mouse over events.
	 * 
	 * @param handler the class to call when the event is fired
	 * @return the handler reference
	 */
	public HandlerRef addOnMouseOverHandler(OnMouseOverHandler handler) {
		return addHandler(handler);
	}

	/**
	 * Adds an handler that listens for ready events.
	 * 
	 * @param handler the class to call when the event is fired
	 * @return the handler reference
	 */
	public HandlerRef addReadyHandler(ReadyHandler handler) {
		return addHandler(handler);
	}

	/**
	 * Adds an handler that listens for select events.
	 * 
	 * @param handler the class to call when the event is fired
	 * @return the handler reference
	 */
	public HandlerRef addSelectHandler(SelectHandler handler) {
		return addHandler(handler);
	}

	/**
	 * Returns an object containing information about the onscreen placement of the chart and its elements.<br>
	 * Call this <strong>after</strong> the chart is drawn.
	 * 
	 * @return a ChartLayoutInterface
	 */
	public ChartLayoutInterface getChartLayoutInterface() {
		return chartObject.getChartLayoutInterface();
	}

	/**
	 * Returns an array of selected objects, each one describing a data element in the underlying table used to create
	 * the
	 * visualization (a DataView or a DataTable). Each object has properties row and/or column, with the index of the
	 * row and/or column of the selected item in the underlying DataTable. If the row property is null, then the
	 * selection is a column; if the column property is null, then the selection is a row; if both are non-null, then it
	 * is a specific data item. You can call the DataTable.getValue() method to get the value of the selected item. The
	 * retrieved array can be passed into setSelection().
	 * 
	 * @return an array of selected objects
	 */
	public JsArray<Selection> getSelection() {
		return chartObject.getSelection();
	}

	/**
	 * Selects a data entry in the visualization—for example, a point in an area chart, or a bar in a bar chart. When
	 * this method is called, the visualization should visually indicate what the new selection is. The implementation
	 * of setSelection() should not fire a "select" event. Visualizations may ignore part of the selection. For example,
	 * a table that can show only selected rows may ignore cell or column elements in its setSelection() implementation,
	 * or it can select the entire row.
	 * 
	 * Every time this method is called, all selected items are deselected, and the new selection list passed in should
	 * be applied. There is no explicit way to deselect individual items; to deselect individual items, call
	 * setSelection() with the items to remain selected; to deselect all elements, call setSelection(),
	 * setSelection(null), or setSelection([]).
	 * 
	 * @param selection
	 */
	public void setSelection(Selection... selection) {
		this.selection = ArrayHelper.createArray(selection);
		chartObject.setSelection(this.selection);
	}

	@Override
	protected native ChartObject createChartObject(Element container) /*-{
		return new $wnd.google.visualization.Sankey(container);
	}-*/;

	@Override
	protected void redrawNow() {
		super.redrawNow();
		if (selection != null) {
			chartObject.setSelection(selection);
		}
	}
}
]]>
</codefragment>
</duplication>
<duplication lines="99" tokens="132">
<file line="40" path="/home/rgafonso/workspace/gwt-charts-0.9.10/src/main/java/com/googlecode/gwt/charts/client/calendar/Calendar.java"/>
<file line="56" path="/home/rgafonso/workspace/gwt-charts-0.9.10/src/main/java/com/googlecode/gwt/charts/client/corechart/CoreChartWidget.java"/>
<codefragment>
<![CDATA[
		return addHandler(handler);
	}

	/**
	 * Adds an handler that listens for error events.
	 * 
	 * @param handler the class to call when the event is fired
	 * @return the handler reference
	 */
	public HandlerRef addErrorHandler(ErrorHandler handler) {
		return addHandler(handler);
	}

	/**
	 * Adds an handler that listens for mouse out events.
	 * 
	 * @param handler the class to call when the event is fired
	 * @return the handler reference
	 */
	public HandlerRef addOnMouseOutHandler(OnMouseOutHandler handler) {
		return addHandler(handler);
	}

	/**
	 * Adds an handler that listens for mouse over events.
	 * 
	 * @param handler the class to call when the event is fired
	 * @return the handler reference
	 */
	public HandlerRef addOnMouseOverHandler(OnMouseOverHandler handler) {
		return addHandler(handler);
	}

	/**
	 * Adds an handler that listens for ready events.
	 * 
	 * @param handler the class to call when the event is fired
	 * @return the handler reference
	 */
	public HandlerRef addReadyHandler(ReadyHandler handler) {
		return addHandler(handler);
	}

	/**
	 * Adds an handler that listens for select events.
	 * 
	 * @param handler the class to call when the event is fired
	 * @return the handler reference
	 */
	public HandlerRef addSelectHandler(SelectHandler handler) {
		return addHandler(handler);
	}

	/**
	 * Returns an object containing information about the onscreen placement of the chart and its elements.<br>
	 * Call this <strong>after</strong> the chart is drawn.
	 * 
	 * @return a ChartLayoutInterface
	 */
	public ChartLayoutInterface getChartLayoutInterface() {
		return chartObject.getChartLayoutInterface();
	}

	/**
	 * Returns an array of selected objects, each one describing a data element in the underlying table used to create
	 * the
	 * visualization (a DataView or a DataTable). Each object has properties row and/or column, with the index of the
	 * row and/or column of the selected item in the underlying DataTable. If the row property is null, then the
	 * selection is a column; if the column property is null, then the selection is a row; if both are non-null, then it
	 * is a specific data item. You can call the DataTable.getValue() method to get the value of the selected item. The
	 * retrieved array can be passed into setSelection().
	 * 
	 * @return an array of selected objects
	 */
	public JsArray<Selection> getSelection() {
		return chartObject.getSelection();
	}

	/**
	 * Selects a data entry in the visualization—for example, a point in an area chart, or a bar in a bar chart. When
	 * this method is called, the visualization should visually indicate what the new selection is. The implementation
	 * of setSelection() should not fire a "select" event. Visualizations may ignore part of the selection. For example,
	 * a table that can show only selected rows may ignore cell or column elements in its setSelection() implementation,
	 * or it can select the entire row.
	 * 
	 * Every time this method is called, all selected items are deselected, and the new selection list passed in should
	 * be applied. There is no explicit way to deselect individual items; to deselect individual items, call
	 * setSelection() with the items to remain selected; to deselect all elements, call setSelection(),
	 * setSelection(null), or setSelection([]).
	 * 
	 * @param selection
	 */
	public void setSelection(Selection... selection) {
		this.selection = ArrayHelper.createArray(selection);
		chartObject.setSelection(this.selection);
	}

	@Override
	protected void redrawNow() {
]]>
</codefragment>
</duplication>
<duplication lines="103" tokens="109">
<file line="151" path="/home/rgafonso/workspace/gwt-charts-0.9.10/src/main/java/com/googlecode/gwt/charts/client/corechart/AreaChartOptions.java"/>
<file line="179" path="/home/rgafonso/workspace/gwt-charts-0.9.10/src/main/java/com/googlecode/gwt/charts/client/corechart/ComboChartOptions.java"/>
<codefragment>
<![CDATA[
	public final native void setInterval(String id, Interval interval) /*-{
		if (!this.interval) {
			this.interval = {};
		}
		this.interval[id] = interval;
	}-*/;

	/**
	 * Sets interval options all columns.
	 * 
	 * @param interval an object containing interval settings
	 */
	public final native void setIntervals(Interval interval) /*-{
		this.intervals = interval;
	}-*/;

	/**
	 * Stacks or unstacks series elements.
	 * 
	 * @param isStacked If set to true, series elements are stacked (default: false)
	 */
	public final native void setIsStacked(boolean isStacked) /*-{
		this.isStacked = isStacked;
	}-*/;

	/**
	 * Sets the style of dashed lines.<br>
	 * The first number indicates the length of a dash, and the second indicates the gap after it. If there is a third
	 * number, that's the length of the next dash, and a fourth number, if present, is the length of the next gap.
	 * 
	 * @param lineDashStyle
	 */
	public final void setLineDashStyle(int... lineDashStyle) {
		setLineDashStyle(ArrayHelper.createArray(lineDashStyle));
	}

	/**
	 * Defines data line width in pixels. Use zero to hide all lines and show only the points. You can override values
	 * for individual series using {@link #setSeries(int, ComboChartSeries)}.
	 * 
	 * @param width data line width in pixels
	 */
	public final native void setLineWidth(int width) /*-{
		this.lineWidth = width;
	}-*/;

	/**
	 * The orientation of the chart. When set to 'vertical', rotates the axes of the chart so that (for instance) a
	 * column chart becomes a bar chart, and an area chart grows rightward instead of up.
	 * 
	 * @param orientation
	 */
	public final native void setOrientation(Orientation orientation) /*-{
		this.orientation = orientation;
	}-*/;

	/**
	 * Sets the shape of individual data elements.
	 * 
	 * @param pointShape
	 */
	public final native void setPointShape(PointShape pointShape) /*-{
		this.pointShape = pointShape;
	}-*/;

	/**
	 * Sets the shape of individual data elements.
	 * 
	 * @param pointShape
	 */
	public final native void setPointShape(PointShapeType pointShape) /*-{
		this.pointShape = pointShape;
	}-*/;

	/**
	 * Sets diameter of displayed points in pixels. Use zero to hide all points. You can override values for individual
	 * series using {@link #setSeries(int, ComboChartSeries)}.
	 * 
	 * @param size diameter of displayed points in pixels
	 */
	public final native void setPointSize(int size) /*-{
		this.pointSize = size;
	}-*/;

	/**
	 * If set to true, will draw series from right to left. The default is to draw left-to-right. This option is only
	 * supported for a discrete major axis.
	 * 
	 * @param reverseCategories
	 * @see <a href="http://developers.google.com/chart/interactive/docs/customizing_axes.html#Terminology">Discrete vs
	 *      Continuous</a>
	 */
	public final native void setReverseCategories(boolean reverseCategories) /*-{
		this.reverseCategories = reverseCategories;
	}-*/;

	/**
	 * Sets series options with an array of objects, each describing the format of the corresponding series in the
	 * chart.
	 * 
	 * @param series an array of the corresponding series objects
	 */
	public final void setSeries(ComboChartSeries... series) {
]]>
</codefragment>
</duplication>
</pmd-cpd>